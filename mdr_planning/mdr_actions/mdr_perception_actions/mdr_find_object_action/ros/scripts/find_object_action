#!/usr/bin/env python
import rospy
import smach
from smach_ros import ActionServerWrapper, IntrospectionServer
from mdr_find_object_action.msg import FindObjectAction
from mdr_find_object_action.action_states import FindObject, SetActionLibResult

class FindObjectSkill(smach.StateMachine):
    def __init__(self):
        smach.StateMachine.__init__(self, outcomes=['OVERALL_SUCCESS', 'OVERALL_FAILED', 'PREEMPTED'],
                                    input_keys=['find_object_goal'],
                                    output_keys=['find_object_feedback', 'find_object_result'])

        ontology_url = rospy.get_param('~ontology_url', '')
        ontology_class_prefix = rospy.get_param('~ontology_class_prefix', '')
        retry_count_on_failure = int(rospy.get_param('~retry_count_on_failure', '0'))
        timeout_s = float(rospy.get_param('~timeout_s', '120.'))
        if not ontology_url:
            rospy.logerr('[FIND_OBJECT] Ontology url not specified')

        if not ontology_class_prefix:
            rospy.logerr('[FIND_OBJECT] Ontology class prefix not specified')

        with self:
            smach.StateMachine.add('FIND_OBJECT', FindObject(ontology_url,
                                                             ontology_class_prefix,
                                                             retry_count_on_failure,
                                                             timeout_s),
                                   transitions={'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                                'failed': 'SET_ACTION_LIB_FAILURE',
                                                'timeout': 'SET_ACTION_LIB_FAILURE'})

            smach.StateMachine.add('SET_ACTION_LIB_SUCCESS', SetActionLibResult(True),
                                   transitions={'succeeded': 'OVERALL_SUCCESS'})

            smach.StateMachine.add('SET_ACTION_LIB_FAILURE', SetActionLibResult(False),
                                   transitions={'succeeded': 'OVERALL_FAILED'})


if __name__ == '__main__':
    rospy.init_node('find_object_server')

    # Construct state machine
    sm = FindObjectSkill()

    # smach viewer
    sis = IntrospectionServer('find_object_smach_viewer', sm, '/FIND_OBJECT_SMACH_VIEWER')
    sis.start()

    # Construct action server wrapper
    asw = ActionServerWrapper(
        server_name='find_object_server',
        action_spec=FindObjectAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='find_object_goal',
        feedback_key='find_object_feedback',
        result_key='find_object_result')

    # Run the server on a background thread
    asw.run_server()
    rospy.spin()
